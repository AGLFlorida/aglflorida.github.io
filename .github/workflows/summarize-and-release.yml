name: Summarize and Tag Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '/*.md'
      - 'src/content/releases/*.md'

permissions:
  contents: write

jobs:
  summarize:
    runs-on: ubuntu-latest

    env:
      HF_API_ENDPOINT: ${{ vars.HUGGINGFACE_API_ENDPOINT }}
      HF_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Ensure jq is installed
      #   run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Latest Git Tag or First Commit
        id: latest_tag
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "tag=$(git rev-list --max-parents=0 HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Get Commit Messages Since Last Tag
        id: commit_log
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            latest_tag=$(git describe --tags --abbrev=0)
          else
            latest_tag=$(git rev-list --max-parents=0 HEAD)
          fi

          if git tag --list | grep -q "$latest_tag"; then
            commit_log=$(git log "$latest_tag"..HEAD --pretty=format:"%s")
          else
            commit_log=$(git log --pretty=format:"%s")
          fi

          printf "%s\n" "$commit_log" > commit_log.txt
          echo "log_path=commit_log.txt" >> $GITHUB_OUTPUT

      - name: Prepare Prompt and Query Model
        id: summary
        run: |
          prompt="Summarize the following commit messages into a single paragraph suitable for a press release:\n"
          input="$prompt"
          while IFS= read -r line; do
            input+="- $line\n"
          done < "${{ steps.commit_log.outputs.log_path }}"

          escaped_input=$(printf "%s" "$input" | jq -Rs .)
          payload="{\"inputs\": $escaped_input}"

          # Send request and capture both body and status code
          response_and_status=$(mktemp)
          http_code=$(curl -sS --retry 2 --max-time 30 -w "%{http_code}" -o "$response_and_status" \
            -H "Authorization: Bearer $HF_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$payload" "$HF_API_ENDPOINT")

          response=$(cat "$response_and_status")
          rm "$response_and_status"

          if [[ "$http_code" -ge 200 && "$http_code" -lt 300 ]]; then
            summary=$(echo "$response" | jq -r '.[0].generated_text // .[0].summary_text // empty')
            summary="${summary}"$'\n\nGenerated by mistralai/Mixtral-8x7B-Instruct-v0.1\n'
          else
            echo "--- FALLBACK: Using local summarizer ---"
            summary="This release includes:"
            while IFS= read -r line; do
              # Skip merge commits
              if [[ "$line" == Merge* ]]; then
                continue
              fi

              # Strip emoji-style colons like :shipit:
              line_clean=$(echo "$line" | sed -E 's/:[^[:space:]]+://g')

              if [[ "$line_clean" =~ ^feat: ]]; then
                summary+=$'\n'"- Added: ${line_clean#feat: }"
              elif [[ "$line_clean" =~ ^fix: ]]; then
                summary+=$'\n'"- Fixed: ${line_clean#fix: }"
              elif [[ "$line_clean" =~ ^chore: ]]; then
                summary+=$'\n'"- Maintenance: ${line_clean#chore: }"
              elif [[ "$line_clean" =~ ^docs: ]]; then
                summary+=$'\n'"- Docs updated: ${line_clean#docs: }"
              fi
            done <<< "$commit_log"
          fi

          printf "%s\n" "$summary" > summary.txt
          echo "summary_file=summary.txt" >> $GITHUB_OUTPUT
          cat summary.txt

      - name: Skip if Summary Is Empty
        id: skip_check
        run: |
          if [ ! -s summary.txt ]; then
            echo "No summary to commit or tag. Exiting."
            exit 0
          fi

      - name: Create Blog Post Markdown from Template
        id: release 
        run: |
          today=$(date +'%Y%b%d')
          iso_date=$(date -Iseconds)
          release_path="src/content/releases/releasenotes-${today}.md"
          summary=$(cat "${{ steps.summary.outputs.summary_file }}")

          # Escape forward slashes and ampersands for safe sed injection
          escaped_summary=$(printf '%s\n' "$summary" | sed -e 's/[\/&]/\\&/g')

          sed -e "s/{{ date }}/$today/" \
              -e "s/{{ iso_date }}/$iso_date/" \
              .templates/release-note-template.md > "$release_path"

          awk -v summary="$summary" '
            {
              if ($0 ~ /{{ summary }}/) {
                print summary
              } else {
                print $0
              }
            }
          ' "$release_path" > "${release_path}.tmp" && mv "${release_path}.tmp" "$release_path"

          echo "release_path=$release_path" >> $GITHUB_OUTPUT

      - name: Commit and Push Release Post
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add "${{ steps.release.outputs.release_path }}"
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          
          commit_message="docs: add release notes for ${{ steps.release.outputs.release_path }}"
          sanitized_message=$(echo "$commit_message" | tr -d '\n' | sed 's/[^[:print:]]//g')
          git commit -m "$sanitized_message"
          git push

      - name: Compute Next Version
        id: version
        run: |
          current_tag="${{ steps.latest_tag.outputs.tag }}"
          if [[ "$current_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            new_tag="v$major.$((minor + 1)).0"
          else
            new_tag="v0.1.0"
          fi
          echo "tag=$new_tag" >> $GITHUB_OUTPUT


      - name: Tag Release Commit
        run: |
          tag="${{ steps.version.outputs.tag }}"
          
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists. Skipping."
            exit 0
          fi

          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"
