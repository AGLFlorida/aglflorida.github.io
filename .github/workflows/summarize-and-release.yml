name: Summarize Commits and Tag Release

on:
  push:
    branches: [main]
    paths-ignore:
      - '*.md'

permissions:
  contents: write

jobs:
  summarize_and_release:
    runs-on: ubuntu-latest
    env:
      HF_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
      HF_API_ENDPOINT: ${{ vars.HUGGINGFACE_API_ENDPOINT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Skip if only root markdown files changed
        run: |
          echo "Checking for meaningful changes..."
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -vE '^([^/]+\.md)$' | grep -q .; then
            echo "Meaningful files changed. Continuing..."
          else
            echo "Only root-level .md files changed. Skipping workflow."
            exit 0
          fi

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag or first commit
        id: get_tag
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            latest=$(git describe --tags --abbrev=0)
          else
            latest=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "latest_tag=$latest" >> $GITHUB_OUTPUT

      - name: Get commit messages since last tag
        id: get_commits
        run: |
          if git tag --list | grep -q "${{ steps.get_tag.outputs.latest_tag }}"; then
            commits=$(git log ${{ steps.get_tag.outputs.latest_tag }}..HEAD --pretty=format:"%s")
          else
            commits=$(git log --pretty=format:"%s")
          fi
          echo "commit_messages<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Summarize commits using HuggingFace
        id: summarize
        run: |
          input="summarize: ${{ steps.get_commits.outputs.commit_messages }}"
          payload="{\"inputs\": \"$input\"}"

          for i in {1..3}; do
            response=$(curl -sS --retry 3 --max-time 30 \
              -H "Authorization: Bearer $HF_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$payload" "$HF_API_ENDPOINT")

            summary=$(echo "$response" | grep -o '"generated_text": *"[^"]*"' | sed 's/"generated_text": *"\(.*\)"/\1/')
            if [ -n "$summary" ]; then break; fi
          done

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate release notes markdown file
        id: generate_md
        run: |
          DATE=$(date +"%Y%b%d")
          ISO_DATE=$(date -I)
          TEMPLATE=".templates/release-note-template.md"
          OUTFILE="src/content/blog/releasenotes-${DATE}.md"

          mkdir -p src/content/blog

          if [ -f "$TEMPLATE" ]; then
            cp "$TEMPLATE" "$OUTFILE"
          else
            echo -e "---\ntitle: Release Notes for ${DATE}\ndate: ${ISO_DATE}\n---\n\n{{ summary }}" > "$OUTFILE"
          fi

          sed -i "s/{{ date }}/$DATE/g" "$OUTFILE"
          sed -i "s/{{ iso_date }}/$ISO_DATE/g" "$OUTFILE"

          summary="${{ steps.summarize.outputs.summary }}"
          if grep -q '{{ summary }}' "$OUTFILE"; then
            if [ -n "$summary" ]; then
              sed -i "s|{{ summary }}|$summary|" "$OUTFILE"
            else
              sed -i "/{{ summary }}/d" "$OUTFILE"
            fi
          else
            echo "$summary" >> "$OUTFILE"
          fi

          echo "outfile=$OUTFILE" >> $GITHUB_OUTPUT

      - name: Commit release notes markdown
        run: |
          git add ${{ steps.generate_md.outputs.outfile }}
          git commit -m "docs: add release notes for ${{ steps.generate_md.outputs.outfile }}"
          git push origin main

      - name: Determine next semantic version
        id: next_version
        run: |
          current="${{ steps.get_tag.outputs.latest_tag }}"
          version="${current#v}"
          IFS='.' read -r major minor patch <<< "$version"
          bump="patch"

          while IFS= read -r line; do
            if echo "$line" | grep -q "BREAKING CHANGE"; then bump="major"; break
            elif echo "$line" | grep -q "^feat:"; then bump="minor"
            elif echo "$line" | grep -q "^fix:" && [ "$bump" != "minor" ]; then bump="patch"
            fi
          done <<< "${{ steps.get_commits.outputs.commit_messages }}"

          if [ "$bump" = "major" ]; then major=$((major + 1)); minor=0; patch=0
          elif [ "$bump" = "minor" ]; then minor=$((minor + 1)); patch=0
          else patch=$((patch + 1))
          fi

          new_tag="v$major.$minor.$patch"
          echo "version=$new_tag" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git tag ${{ steps.next_version.outputs.version }}
          git push origin ${{ steps.next_version.outputs.version }}

      - name: Draft GitHub release with Release Drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          tag: ${{ steps.next_version.outputs.version }}
          name: ${{ steps.next_version.outputs.version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
